:-op(15,xfx,=>).

elimina(_,[],[]):-!.
elimina(X,[X],[]):-!.
elimina(X,[X|B],S):-
	elimina(X,B,S),!.
elimina(X,[A|B],S):-
	elimina(X,B,W),addElement([A],W,S).

cuenta(_,[],0):-!.
cuenta(A,[A|T],X):-
	cuenta(A,T,X1),!,X is X1 + 1.	
cuenta(A,[H|T],X):-
	A\=H,
	cuenta(A,T,X),!.
	
%brazosLibres(X,Y):-object(X,"Agente",Atrs,_),valor(brazosLibres,Atrs,Y).

%brazosLibres([[en,robot,inicio],[brazosLibres,2]],Y).
brazosLibres([],0):-!.
brazosLibres([H|T],Y):-	
	[NombrePrecondicion|_] = H,
	(NombrePrecondicion = brazosLibres ->
		[brazosLibres,Y] = H;brazosLibres(T,Y)
	),!.

tiempoRestate(_,[],0):-!.
tiempoRestate(Tiempo,[H|T],NuevoTiempo):-
	[NombrePrecondicion|_] = H,
	(NombrePrecondicion = tiempoRestate ->
		[tiempoRestate,ViejoTiempo] = H, NuevoTiempo is ViejoTiempo - Tiempo;tiempoRestate(Tiempo,T,NuevoTiempo)
	),!.
	
enTiempo([AccionH|AccionT],[H|T]):-
	(AccionH = mover -> 
		[mover,_,Li,Lj] = [AccionH|AccionT], costoDeIr(Li,Lj,Costo);
		[NombreMetodo,Alimento,_,_] = [AccionH|AccionT],costoDe(NombreMetodo,Alimento,Costo)
	),
	tiempoRestate(Costo,[H|T],NuevoTiempo),
	(NuevoTiempo >= 0 -> true;false),!.
	
%modificaBrazosLibres(1,[[agarrado,refresco,robot],[en,robot,mesa1],[en,agua,mesa1],[brazosLibres,0]],L).
modificaBrazosLibres(_,[],[]):-!.
modificaBrazosLibres(Valor,[H|T],L):-
	modificaBrazosLibres(Valor,T,Res),
	[NombrePrecondicion|_] = H,
	(NombrePrecondicion = brazosLibres ->
		[brazosLibres,Y] = H, NewY is Y + Valor, addElement([[brazosLibres,NewY]],Res,L);addElement([H],Res,L)
	),!.
	
%obtenEstadoAgente([en,robot,inicio],S).
obtenEstadoAgente([H|T],Lista):-
	[en,A,L] = [H|T],
	object(A,"Agente",_,_) -> (
		Lista = [en,A,L]; Lista = []
	),!.
	
%iteradorEstadoAgente([[en, robot, inicio], [brazoLibre], [en, agua, estante1]],L).
iteradorEstadoAgente([],[]):-!.
iteradorEstadoAgente([H|_],L):-
	obtenEstadoAgente(H,L),
	length(L,Size),
	Size > 0,!.
iteradorEstadoAgente([_|T],L):-
	iteradorEstadoAgente(T,L),!.

%TIENE EN DURO clase alimento
%obtenEstadoObjeto([en,agua,estante1],L).
obtenEstadoObjeto([H|T],Lista):-
	[en,_,_] \= [H|T],
	Lista = [],!.
obtenEstadoObjeto([H|T],Lista):-
	[en,O,L] = [H|T],
	object(O,"Alimento",_,_) -> (
		Lista = [en,O,L]; Lista = []
	),!.
obtenEstadoObjeto([H|T],Lista):-
	[en,_,_] = [H|T],
	Lista = [],!.
	
%iteradorEstadoObjetos([[en, robot, inicio], [brazoLibre], [en, agua, estante1]],L).
iteradorEstadoObjetos([],[]):-!.
iteradorEstadoObjetos([H|T],L):-
	iteradorEstadoObjetos(T,LR),
	obtenEstadoObjeto(H,R),
	length(R,Size),
	(Size > 0 ->addElement([R],LR,UL);addElement([],LR,UL)
	),L = UL,!.

estadoDumy(L):-
	%L = [[en,robot,inicio],[brazoLibre],[en,refresco,estante1],[en,agua,estante1]].
	%L = [[en,robot,estante1],[brazoLibre],[en,refresco,estante1],[en,agua,estante2]].
	%L = [[en,robot,estante1],[brazoLibre],[en,refresco,estante1],[en,agua,estante1],[buscado,refresco,robot]].
	%L = [[en,robot,estante1],[en,refresco,estante1],[en,agua,estante1],[buscado,agua,robot],[buscado,refresco,robot]].
	%L = [[en, robot, estante1], [brazoLibre], [en, agua, estante1], [agarrado, refresco, robot]].
	%L = [[en, robot, estante1], [brazoLibre], [agarrado, refresco, robot],[agarrado, agua, robot]].
	L = [[en, robot, mesa1], [en, refresco,mesa1],[en, agua,mesa2]].
efectosDumy(EP,EN):-
	%EP = [[en,robot,mesa1]],EN = [[en,robot,inicio]].
	EP = [[buscado,agua,robot]],EN = [[]].
accionDummy(L):-
	%L = [mover,_,_,_].
	%L = [buscar,_,_,_].
	L = [agarrar,_,_,_].
	%L = [colocar,_,_,_].

%efectosDumy(EP,EN),estadoDumy(L),eliminaEfectosNegativos(EN,L,R).
eliminaEfectosNegativos([],[R|S],L):-L = [R|S],!.
eliminaEfectosNegativos([H|T],[R|S],L):-
	eliminaEfectosNegativos(T,[R|S],RS),
	elimina(H,RS,L),!.

encuentraTiempoRestante([],[]):-!.	
encuentraTiempoRestante([ESH|EST],L):-
	(ESH = [tiempoRestate,Valor] ->
		L = [tiempoRestate,Valor];encuentraTiempoRestante(EST,L)
	),!.

%efectosDumy(EP,EN),estadoDumy(L),calculaNuevoEstadoAccion(EP,EN,L,R).
%getEfecto([mover,inicio,mesa1],EP,EN),estadoDumy(L),calculaNuevoEstadoAccion(EP,EN,L,R).
%getEfecto([buscar,refresco,estante1,robot],EP,EN),estadoDumy(L),calculaNuevoEstadoAccion(EP,EN,L,R).
%getEfecto([agarrar,refresco,estante1,robot],EP,EN),estadoDumy(L),write(EP),nl,write(EN),nl,write(L),nl,calculaNuevoEstadoAccion(EP,EN,L,R).
%getEfecto([entregar,refresco,mesa1,robot],EP,EN),estadoDumy(L),write(EP),nl,write(EN),nl,write(L),nl,calculaNuevoEstadoAccion(EP,EN,L,R).
calculaNuevoEstadoAccion(Costo,[EPH|EPT],[ENH|ENT],[ESH|EST],L):-
	eliminaEfectosNegativos([ENH|ENT],[ESH|EST],RE),
	addElement(RE,[EPH|EPT],NuevoEstado),
	tiempoRestate(Costo,NuevoEstado,NuevoTiempo),
	encuentraTiempoRestante(NuevoEstado,TiempoRestante),
	eliminaEfectosNegativos([TiempoRestante],NuevoEstado,EstadoSinTiempoRestante),
	addElement([[tiempoRestate,NuevoTiempo]],EstadoSinTiempoRestante,L),!.

%accionDummy(L),L = [mover,robot,inicio,mesa1],getEfecto(L,EP,EN).
getEfecto([EstadoH|EstadoT],[H|T],EP,EN,L):-
	[mover,X,Y,Z] = [H|T],
	addElement([[en,X,Z]],[],EP),
	addElement([[en,X,Y]],[],EN),
	L = [EstadoH|EstadoT],!.
%accionDummy(L),L = [buscar,refresco,estante1,robot],getEfecto(L,EP,EN).
getEfecto([EstadoH|EstadoT],[H|T],EP,EN,L):-
	[buscar,O,_,X] = [H|T],
	addElement([[buscado,O,X]],[],EP),
	addElement([[]],[],EN),
	L = [EstadoH|EstadoT],!.
%accionDummy(L),L = [agarrar,refresco,estante1,robot],getEfecto(L,EP,EN).
%getEfecto([[brazosLibres,2],[en,agua,estante2],[en,refresco,estante2],[en,robot,estante2],[buscado,refresco,robot]],[agarrar,refresco,estante2,robot],EP,EN).
getEfecto([EstadoH|EstadoT],[H|T],EP,EN,NuevoEstado):-
	[agarrar,O,L,X] = [H|T],
	addElement([[agarrado,O,X]],[],EP),
	addElement([[en,O,L],[buscado,O,X]],[],EN),
	modificaBrazosLibres(-1,[EstadoH|EstadoT],NuevoEstado),!.
%accionDummy(L),L = [colocar,refresco,estante1,robot],getEfecto(L,EP,EN).
getEfecto([EstadoH|EstadoT],[H|T],EP,EN,NuevoEstado):-
	[entregar,O,L,X] = [H|T],
	addElement([[en,O,L]],[],EP),
	addElement([[agarrado,O,X]],[],EN),
	modificaBrazosLibres(1,[EstadoH|EstadoT],NuevoEstado),!.
%estadoDumy(L),iteradorEstadoObjetos(L,A),encuentraAccionBusqueda([en, refresco, estante1],L,E,R).
%estadoDumy(L),iteradorEstadoObjetos(L,A),encuentraAccionBusqueda([en, agua, estante1],L,E,R).
encuentraAccionBusqueda([H|T],[],E,[]):- E = [H|T],!.	
encuentraAccionBusqueda([H|T],[R|S],E,A):-
	[Metodo|_] = R,
	(Metodo = buscado ->(
			([en,O,_] = [H|T],
			[buscado,O,X] = R)->(
				addElement([buscado,O,X],[],A),
				E = []
			);
			encuentraAccionBusqueda([H|T],S,E,A)	
		);
		encuentraAccionBusqueda([H|T],S,E,A)
	),!.
%estadoDumy(L),iteradorEstadoObjetos(L,A),encuentraAccionesBusqueda(A,L,E,R).
encuentraAccionesBusqueda([],[_|_],[],[]):-!.
encuentraAccionesBusqueda([H|T],[R|S],E,L):-
	encuentraAccionesBusqueda(T,[R|S],RE1,RS),
	encuentraAccionBusqueda(H,[R|S],RE,RA),
	length(RE,SizeRE),
	(SizeRE > 0 -> addElement([RE],RE1,E); addElement([],RE1,E)
	),
	length(RA,SizeRA),
	(SizeRA > 0 -> addElement([RA],RS,L); addElement([],RS,L)
	),!.

%estadoDumy(L),iteradorEstadoAgente(L,EA),iteradorEstadoObjetos(L,EO),iteraAccionBuscarMover(EA,EO,R).
iteraAccionBuscarMover([_|_],[],[_|_],[]):-!.
iteraAccionBuscarMover([R|S],[Y|W],[EstadoH|EstadoT],L):-
	brazosLibres([EstadoH|EstadoT],Z),
	(Z > 0 ->
		iteraAccionBuscarMover([R|S],W,[EstadoH|EstadoT],RS),
		[en,A,La] = [R|S],
		[en,O,Lo] = Y,
		(La \= Lo  ->  	cuenta([mover,A,La,Lo],RS,Cuenta),
				(Cuenta = 0,enTiempo([mover,A,La,Lo],[EstadoH|EstadoT]) -> 
					addElement([[mover,A,La,Lo]],RS,L);addElement([],RS,L))
				;
				(enTiempo([buscar,O,Lo,A],[EstadoH|EstadoT]) ->
					addElement([[buscar,O,Lo,A]],RS,L);addElement([],RS,L)
				)
		);
		L = []
		%VALIDAR SI ES NECESARIO
		%[en,A,La] = [R|S],
		%[en,_,Lo] = Y,
		%cuenta([mover,A,La,Lo],RS,Cuenta),
		%(Cuenta = 0 -> addElement([[mover,A,La,Lo]],RS,L);addElement([],RS,L))
	),!.

iteraAccionAgarrar([_|_],[],[_|_],[]):-!.
iteraAccionAgarrar([A|B],[H|T],[EstadoH|EstadoT],L):-
	brazosLibres([EstadoH|EstadoT],Z),
	(Z > 0 ->
		iteraAccionAgarrar([A|B],T,[EstadoH|EstadoT],RS),
		[en,X,Lx] = [A|B],
		[buscado,O,X] = H,
		(enTiempo([agarrar,O,Lx,X],[EstadoH|EstadoT]) ->
			addElement([[agarrar,O,Lx,X]],RS,L);addElement([],RS,L)
		)
		;
		L = []
	),!.
	

%iteraObjetoAgarrado(agua,[en,robot,estante1],[[en,agua,mesa1],[en,refresco,mesa2]],L).
iteraObjetoAgarrado([_,_],_,[_|_],[],[]):-write("Entro"),!.
iteraObjetoAgarrado([EstadoH|EstadoT],Objeto,[C|D],[E|F],L):-
	[en,O,Lo] = E,
	(O = Objeto -> 	[en,A,La] = [C|D],
			(Lo = La ->
				(enTiempo([entregar,O,Lo,A],[EstadoH|EstadoT]) ->
					L = [entregar,O,Lo,A]; L = []
				);
				(enTiempo([mover,A,La,Lo],[EstadoH|EstadoT]) ->
					L = [mover,A,La,Lo]; L = []
				)
			);
			iteraObjetoAgarrado([EstadoH|EstadoT],Objeto,[C|D],F,L)
	),!.
	
%iteraObjetosAgarrados([agua,refresco],[en,robot,estante1],[[en,agua,mesa1],[en,refresco,mesa2]],L).
iteraObjetosAgarrados([_|_],[],[_|_],[_|_],[]):-!.
iteraObjetosAgarrados([EstadoH|EstadoT],[H|T],[C|D],[E|F],L):-
	iteraObjetosAgarrados([EstadoH|EstadoT],T,[C|D],[E|F],RS),
	iteraObjetoAgarrado([EstadoH|EstadoT],H,[C|D],[E|F],RA),
	addElement([RA],RS,L),!.

%agregaObjetosAgarrados([[agarrado,agua,robot],[agarrado,refresco,robot],[en,robot,inicio]],L).
agregaObjetosAgarrados([],[]):-!.
agregaObjetosAgarrados([H|T],L):-
	agregaObjetosAgarrados(T,RS),
	([agarrado,O,_] = H ->	addElement([O],RS,L);addElement([],RS,L)
	),!.

iteraDepuraAccionesAlcanzadas([_|_],[],[]):-!.		
iteraDepuraAccionesAlcanzadas([],[EoH|EoT],L):-L = [EoH|EoT],!.	
iteraDepuraAccionesAlcanzadas([ObH|ObT],[EoH|EoT],L):-
	iteraDepuraAccionesAlcanzadas(ObT,[EoH|EoT],RE),
	elimina(ObH,RE,L),!.

%depuraAccionesAlcanzadas([[en,agua,mesa1],[en,refresco,mesa2]],[[en,agua,estante1],[en,refresco,estante2]],L).
depuraAccionesAlcanzadas([_|_],[],[]):-!.
depuraAccionesAlcanzadas([A|B],[R|S],L):-
	iteraDepuraAccionesAlcanzadas([A|B],[R|S],L).
	
%estadoDumy(L),estadoObjetivo([agua=>mesa1,refresco=>mesa2],LO),encuentraAccionesAplicables(LO,L,S).
%encuentraAccionesAplicables([[en,agua,mesa1],[en,refresco,mesa2]],[[en,agua,estante2],[en,refresco,estante2],[en,robot,estante2],[buscado,agua,robot],[buscado,refresco,robot]],L).
encuentraAccionesAplicables([A|B],[R|S],L):-
	iteradorEstadoAgente([R|S],EA),iteradorEstadoObjetos([R|S],EO),
	depuraAccionesAlcanzadas([A|B],EO,EO1),
	encuentraAccionesBusqueda(EO1,[R|S],EO2,EB),
	length(EB,Size),
	(Size > 0 ->
		L1 = []; iteraAccionBuscarMover(EA,EO2,[R|S],L1)	
	),
	iteraAccionAgarrar(EA,EB,[R|S],L2),
	addElement(L1,L2,L3),
	agregaObjetosAgarrados([R|S],OA),
	iteraObjetosAgarrados([R|S],OA,EA,[A|B],L4),
	addElement(L3,L4,L),!.
	
nodo([_|_]).

%estadoDumy(L),generaNodoPadreDummy(L,NodoPadreDummy).
generaNodoPadreDummy(L,NodoPadreDummy):-
	NodoPadreDummy = nodo([estado=>L,probabilidad=>96,recompenza=>300,costo=>15,heuristicaProbabilidad=>818,heuristicaRecompenza=>1310]).

%estadoDumy(L),generaNodoPadreDummy(L,NodoPadreDummy),comparaMejorNodo(NodoPadreDummy,[buscar,refresco,estante1,robot],nodo([estado=>[],probabilidad=>0,recompenza=>0,costo=>0]),NewNodo),write(NewNodo).
%estadoDumy(L),generaNodoPadreDummy(L,NodoPadreDummy),comparaMejorNodo(NodoPadreDummy,[buscar,refresco,estante1,robot],nodo([estado=>[[en,robot,estante1],[brazoLibre],[en,agua,estante1],[agarrado,refresco,robot],[buscado,refresco,robot],[buscado,refresco,robot]],probabilidad=>96.0,recompenza=>50,costo=>2,heuristicaProbabilidad=>818,heuristicaRecompenza=>1310,accion=>[mover,robot,inicio,estante1]]),NewNodo),write(NewNodo).
%comparaMejorNodo(nodo([estado=>[[brazosLibres,2],[en,agua,estante2],[en,refresco,estante2],[en,robot,estante2],[buscado,refresco,robot]],probabilidad=>96.0,recompenza=>50,costo=>2,heuristicaProbabilidad=>554.0,heuristicaRecompenza=>860,accion=>[buscar,refresco,estante2,robot]]),[agarrar,refresco,estante2,robot],nodo([estado=>[[brazosLibres,2]],probabilidad=>0,recompenza=>0,costo=>0,accion=>[]]),N).
comparaMejorNodo(NodoPadre,[AccionH|AccionT],NodoHijoMin,NewNodo):-
	%write("---- Se compara nodo ----"),nl,
	%write("NodoPadre:"),tab(2),write(NodoPadre),nl,
	%write("[AccionH|AccionT]:"),tab(2),write([AccionH|AccionT]),nl,
	%write("NodoHijoMin:"),tab(2),write(NodoHijoMin),nl,
	[NombreAccion|_] = [AccionH|AccionT],
	nodo([NPH|NPT]) = NodoPadre,
	nodo([NHMH|NHMT]) = NodoHijoMin,
	searchValue(probabilidad,[NPH|NPT],ProbabilidadAcumulada),
	searchValue(recompenza,[NPH|NPT],RecompenzaAcumulada),
	searchValue(costo,[NPH|NPT],CostoAcumulado),
	searchValue(heuristicaProbabilidad,[NPH|NPT],HeuristicaProbabilidad),
	searchValue(heuristicaRecompenza,[NPH|NPT],HeuristicaRecompenza),
	searchValue(probabilidadH,[NHMH|NHMT],ProbabilidadHMin),
	searchValue(recompenzaH,[NHMH|NHMT],RecompenzaHMin),
	searchValue(costo,[NHMH|NHMT],CostoHMin),
	(NombreAccion = buscar ->
		[_,Objeto,_,_] = [AccionH|AccionT],
		probabilidadDe(NombreAccion,Objeto,ProbabilidadNodo),
		probabilidadDe(agarrar,Objeto,ProbabilidadAgarrar),
		probabilidadDe(entregar,Objeto,ProbabilidadEntregar),
		recompensaDe(NombreAccion,Objeto,RecompenzaNodo),
		recompensaDe(agarrar,Objeto,RecompenzaAgarrar),
		recompensaDe(entregar,Objeto,RecompenzaEntregar),
		ProductoProbabilidadesH is ProbabilidadNodo *  ProbabilidadAgarrar * ProbabilidadEntregar,
		SumaRecompenzasH is RecompenzaNodo + RecompenzaAgarrar + RecompenzaEntregar,
		costoDe(NombreAccion,Objeto,Costo);
		(NombreAccion = agarrar ->
			[_,Objeto,_,_] = [AccionH|AccionT],
			probabilidadDe(NombreAccion,Objeto,ProbabilidadNodo),
			probabilidadDe(buscar,Objeto,ProbabilidadEntregar),
			recompensaDe(NombreAccion,Objeto,RecompenzaNodo),
			recompensaDe(entregar,Objeto,RecompenzaEntregar),
			ProductoProbabilidadesH is ProbabilidadNodo *  ProbabilidadEntregar,
			SumaRecompenzasH is RecompenzaNodo + RecompenzaEntregar,
			costoDe(NombreAccion,Objeto,Costo);
			(NombreAccion = entregar ->
				[_,Objeto,_,_] = [AccionH|AccionT],
				probabilidadDe(NombreAccion,Objeto,ProbabilidadNodo),
				recompensaDe(NombreAccion,Objeto,RecompenzaNodo),
				ProductoProbabilidadesH = ProbabilidadNodo,
				SumaRecompenzasH = RecompenzaNodo,
				costoDe(NombreAccion,Objeto,Costo);
				[_,_,Li,Lj] = [AccionH|AccionT],
				%probabilidadDeIr(Li,Lj,Probabilidad),
				ProbabilidadNodo = 1,
				RecompenzaNodo = 0,
				ProductoProbabilidadesH = 1,
				SumaRecompenzasH = 0,
				costoDeIr(Li,Lj,Costo)
			)
		)
	),
	ProbabilidadTotal is ProbabilidadAcumulada * ProbabilidadNodo,
	RecompenzaTotal is RecompenzaAcumulada + RecompenzaNodo,
	ProbabilidadH is ProbabilidadTotal * ProductoProbabilidadesH,
	RecompenzaH is RecompenzaTotal + SumaRecompenzasH,
	CostoTotal is CostoAcumulado + Costo,
	(CostoHMin>0 ->
		calculaHeuristica(ProbabilidadH,HeuristicaProbabilidad,RecompenzaH,HeuristicaRecompenza,Heuristica),
		calculaHeuristica(ProbabilidadHMin,HeuristicaProbabilidad,RecompenzaHMin,HeuristicaRecompenza,HeuristicaMin),
		%write("Calculo Heuristicas"),nl,
		write(ProbabilidadH),tab(2),write(RecompenzaH),tab(2),write(Heuristica),tab(2),write(CostoTotal),nl,
		write(ProbabilidadHMin),tab(2),write(RecompenzaHMin),tab(2),write(HeuristicaMin),tab(2),write(CostoHMin),nl,
		%write("Fin Calculo Heuristicas"),nl,
		((Heuristica + CostoTotal) < (HeuristicaMin + CostoHMin)->
			searchValue(estado,[NPH|NPT],Estado),
			getEfecto(Estado,[AccionH|AccionT],EP,EN,EstadoBrazos),
			calculaNuevoEstadoAccion(Costo,EP,EN,EstadoBrazos,NuevoEstado),
			NewNodo = nodo([estado=>NuevoEstado,probabilidad=>ProbabilidadTotal,probabilidadH=>ProbabilidadH,recompenza=>RecompenzaTotal,recompenzaH=>RecompenzaH,costo=>CostoTotal,heuristicaProbabilidad=>HeuristicaProbabilidad,heuristicaRecompenza=>HeuristicaRecompenza,accion=>[AccionH|AccionT]])
			;
			NewNodo = NodoHijoMin
		);
		write("Probabilidades y Recompenzas"),nl,
		write(ProbabilidadTotal),tab(2),write(RecompenzaTotal),tab(2),tab(2),write(CostoTotal),nl,
		write("Probabilidades y Recompenzas"),nl,
		searchValue(estado,[NPH|NPT],Estado),
		getEfecto(Estado,[AccionH|AccionT],EP,EN,EstadoBrazos),
		calculaNuevoEstadoAccion(Costo,EP,EN,EstadoBrazos,NuevoEstado),
		NewNodo = nodo([estado=>NuevoEstado,probabilidad=>ProbabilidadTotal,probabilidadH=>ProbabilidadH,recompenza=>RecompenzaTotal,recompenzaH=>RecompenzaH,costo=>CostoTotal,heuristicaProbabilidad=>HeuristicaProbabilidad,heuristicaRecompenza=>HeuristicaRecompenza,accion=>[AccionH|AccionT]])
	),
	%write("---- Termino compara nodo ----"),
	nl,!.
	

%calculaHeuristica(96,818,50,1310,H).
calculaHeuristica(ProbabilidadTotal,HeuristicaProbabilidad,RecompenzaTotal,HeuristicaRecompenza,Heuristica):-
	Heuristica is sqrt((HeuristicaProbabilidad - ProbabilidadTotal)^2 + (HeuristicaRecompenza - RecompenzaTotal)^2).

%buscaMejorExpancion(nodo([estado=>[],probabilidad=>0,recompenza=>0,costo=>0,heuristicaProbabilidad=>818,heuristicaRecompenza=>1310]),[[buscar,refresco,mesa1,x],[mover,robot,mesa1,mesa2]],N).
%estadoInicial([agua=>mesa1,refresco=>mesa2],EI),estadoObjetivo([agua=>mesa1,refresco=>mesa2],LO),Nodo = nodo([estado=>EI,probabilidad=>0,recompenza=>0,costo=>0,heuristicaRecompenza=>1310,heuristicaProbabilidad=>818]),encuentraAccionesAplicables(LO,EI,AccionesAplicable),buscaMejorExpancion(Nodo,AccionesAplicable,NodoExpancion).
%estadoInicial([hamburguesa=>mesa1,refresco=>mesa2],EI),estadoObjetivo([hamburguesa=>mesa1,refresco=>mesa2],LO),Nodo = nodo([estado=>EI,probabilidad=>0,recompenza=>0,costo=>0,heuristicaRecompenza=>1310,heuristicaProbabilidad=>818]),encuentraAccionesAplicables(LO,EI,AccionesAplicable),buscaMejorExpancion(Nodo,AccionesAplicable,NodoExpancion).
%estadoInicial([agua=>mesa3,sandwich=>mesa1,hamburguesa=>mesa1,refresco=>mesa2],EI),estadoObjetivo([agua=>mesa3,sandwich=>mesa1,hamburguesa=>mesa1,refresco=>mesa2],LO),Nodo = nodo([estado=>EI,probabilidad=>0,recompenza=>0,costo=>0,heuristicaRecompenza=>1310,heuristicaProbabilidad=>818]),encuentraAccionesAplicables(LO,EI,AccionesAplicable),buscaMejorExpancion(Nodo,AccionesAplicable,NodoExpancion),write(NodoExpancion).
%estadoInicial([agua=>mesa3,sandwich=>mesa1,refresco=>mesa2],EI),estadoObjetivo([agua=>mesa3,sandwich=>mesa1,refresco=>mesa2],LO),Nodo = nodo([estado=>EI,probabilidad=>0,recompenza=>0,costo=>0,heuristicaRecompenza=>1310,heuristicaProbabilidad=>818]),encuentraAccionesAplicables(LO,EI,AccionesAplicable),buscaMejorExpancion(Nodo,AccionesAplicable,NodoExpancion),write(NodoExpancion).
%buscaMejorExpancion(nodo([estado=>[[brazosLibres,2],[en,agua,estante2],[en,refresco,estante2],[en,robot,estante2],[buscado,refresco,robot]],probabilidad=>96.0,recompenza=>50,costo=>2,heuristicaProbabilidad=>554.0,heuristicaRecompenza=>860,accion=>[buscar,refresco,estante2,robot]]),[[buscar,agua,estante2,robot],[agarrar,refresco,estante2,robot]],L).
buscaMejorExpancion(_,[],NodoExpancion):- NodoExpancion = nodo([estado=>[[brazosLibres,2]],probabilidad=>100,probabilidadH=>100,recompenza=>0,recompenzaH=>0,costo=>0,accion=>[]]),!.
buscaMejorExpancion(Nodo,[AccionesH|AccionesT],NodoExpancion):-
	buscaMejorExpancion(Nodo,AccionesT,MinNodo),
	comparaMejorNodo(Nodo,AccionesH,MinNodo,NodoExpancion),!.

iteraEstadoObjetivos([_|_],[],CuentaTotal):-CuentaTotal = 0,!.	
iteraEstadoObjetivos([H|T],[EoH|EoT],CuentaTotal):-
	cuenta([H|T],[EoH|EoT],Cuenta),
	(Cuenta>0 ->
		CuentaTotal is Cuenta;
		iteraEstadoObjetivos([H|T],EoT,CuentaParcial),
		CuentaTotal = CuentaParcial
	),!.

%iteraEstadosObjetivos([[en,agua,mesa1],[en,refresco,mesa2]],[],Cuenta).
iteraEstadosObjetivos([_|_],[],CuentaTotal):-CuentaTotal = 0,!.		
iteraEstadosObjetivos([],[_|_],CuentaTotal):-CuentaTotal = 0,!.	
iteraEstadosObjetivos([ObH|ObT],[EoH|EoT],CuentaTotal):-
	iteraEstadosObjetivos(ObT,[EoH|EoT],CuentaParcial),
	iteraEstadoObjetivos(ObH,[EoH|EoT],CuentaObjetivo),
	CuentaTotal is CuentaParcial + CuentaObjetivo,!.
%estadoObjetivo([agua=>mesa2,refresco=>mesa1],LO),estadoDumy(L),validaSatisfacibilidad(LO,L).
validaSatisfacibilidad([ObH|ObT],[EsH|EsT]):-
	iteradorEstadoObjetos([EsH|EsT],EO),
	iteraEstadosObjetivos([ObH|ObT],EO,Cuenta),
	length([ObH|ObT],Size),
	(Cuenta =  Size ->
		write("No satisface"),nl,
		false;
		write("Satisface"),nl,
		true
	),!.
	
%obtenRecompenzaObjetivo([agua=>mesa1,refresco=>mesa2], R).
obtenRecompenzaObjetivo([],0):-!.
obtenRecompenzaObjetivo([H|T],RecompenzaObjetivo):-
	obtenRecompenzaObjetivo(T,RecompenzaRes),
	=>(Objeto,_) = H,
	recompensaDe(buscar,Objeto,RecompenzaBuscar),
	recompensaDe(agarrar,Objeto,RecompenzaAgarrar),
	recompensaDe(entregar,Objeto,RecompenzaEntregar),
	RecompenzaObjetivo is RecompenzaRes + RecompenzaBuscar + RecompenzaAgarrar + RecompenzaEntregar,!.

%obtenProbabilidadObjetivo([agua=>mesa1,refresco=>mesa2], R).
obtenProbabilidadObjetivo([],1):-!.
obtenProbabilidadObjetivo([H|T],ProbabilidadObjetivo):-
	obtenProbabilidadObjetivo(T,ProbabilidadRes),
	=>(Objeto,_) = H,
	probabilidadDe(buscar,Objeto,ProbabilidadBuscar),
	probabilidadDe(agarrar,Objeto,ProbabilidadAgarrar),
	probabilidadDe(entregar,Objeto,ProbabilidadEntregar),
	%write("("),write(ProbabilidadBuscar),write(")*"),write("("),write(ProbabilidadAgarrar),write(")*"),write("("),write(ProbabilidadEntregar),write(")"),nl,
	ProbabilidadObjetivo is ProbabilidadRes * ProbabilidadBuscar * ProbabilidadAgarrar * ProbabilidadEntregar,!.

%planning([agua=>mesa1,refresco=>mesa2],Plan).
planeador(Nodo,[ObH|ObT],Plan):-
	%estadoInicial([H|T],E0),
	%nodo([estado=>E0,probabilidad=>0,recompenza=>0,costo=>0,heuristicaRecompenza=>1310,heuristicaProbabilidad=>818]),
	write("Nueva Iteracion"),nl,
	nodo([NodoH|NodoT]) = Nodo,
	searchValue(estado,[NodoH|NodoT],Estado),
	validaSatisfacibilidad([ObH|ObT],Estado),
	%write("Nodo"),nl,
	%write(Nodo),nl,
	encuentraAccionesAplicables([ObH|ObT],Estado,AccionesAplicable),
	%write("Acciones"),nl,
	%write(AccionesAplicable),nl,nl,
	buscaMejorExpancion(Nodo,AccionesAplicable,NodoExpancion),
	nodo([NodoEH|NodoET]) = NodoExpancion,
	searchValue(accion,[NodoEH|NodoET],Accion),
	length(AccionesAplicable,Size),
	(Size > 0 ->
		planeador(NodoExpancion,[ObH|ObT],PlanInicial),
		addElement([Accion],PlanInicial,Plan);
		Plan = []	
	),!.
planeador(_,[_|_],[]):-write("Fin de la planeacion"),nl,!.
		
	